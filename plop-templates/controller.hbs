import { Body, Controller, Delete, HttpStatus, Post, Put } from "@nestjs/common"
import { AsyncBaseResponse } from "src/global/BaseResponse"
import { ApiTags, ApiResponse } from "@nestjs/swagger"
import { {{pascalCase name}}Dto, Update{{pascalCase name}}Dto, Create{{pascalCase name}}Dto, Retrieve{{pascalCase name}}Dto } from "./{{kebabCase name}}.dto"
import { {{pascalCase name}}Service } from "./{{kebabCase name}}.service"

@ApiTags("{{pascalCase name}}")
@Controller("{{kebabCase name}}")
export class {{pascalCase name}}Controller {
  constructor(private readonly {{camelCase name}}Service: {{pascalCase name}}Service) {}

	/**
   * Get {{pascalCase name}} objects from database
    * @param retrieve{{pascalCase name}}Dto - object that the retrieval query is based on
   * @returns arrayOf{{pascalCase name}} - Get {{pascalCase name}} objects from the database
   */
  @ApiResponse({
    status: HttpStatus.OK,
    description: "{{pascalCase name}} retrieved successfully",
  })
  @Post("retrieve")
  async retrieve(@Body() retrieve{{pascalCase name}}Dto: Retrieve{{pascalCase name}}Dto): AsyncBaseResponse<Array<{{pascalCase name}}Dto>> {
    const arrayOf{{pascalCase name}} = await this.{{camelCase name}}Service.retrieve(retrieve{{pascalCase name}}Dto)
    return {
      validation: {
        message: "",
        statusCode: HttpStatus.OK,
      },
      data: arrayOf{{pascalCase name}},
    }
  }

  /**
   * creates a {{pascalCase name}} and stores it in the database
   *
   * @param create{{pascalCase name}}Dto - {{pascalCase name}} to be created
   * @returns created{{pascalCase name}} - the {{pascalCase name}}Dto object that was created
   */
  @ApiResponse({
    status: HttpStatus.CREATED,
    description: "{{pascalCase name}} created successfully",
  })
  @Post("create")
  async create(@Body() create{{pascalCase name}}Dto: Create{{pascalCase name}}Dto): AsyncBaseResponse<{{pascalCase name}}Dto> {
    const created{{pascalCase name}} = await this.{{camelCase name}}Service.create(create{{pascalCase name}}Dto)
    return {
      validation: {
        message: "",
        statusCode: HttpStatus.CREATED,
      },
      data: created{{pascalCase name}},
    }
  }

  /**
   * update existing {{pascalCase name}}
   *
   * @param updated{{pascalCase name}}Dto - {{pascalCase name}} with updated attributes
   * @returns updated{{pascalCase name}} - the updated {{pascalCase name}}
   */
  @ApiResponse({
    status: HttpStatus.OK,
    description: "{{pascalCase name}} updated successfully",
  })
  @Put("update")
  async update(
    @Body() updated{{pascalCase name}}Dto: Update{{pascalCase name}}Dto,
  ): AsyncBaseResponse<{{pascalCase name}}Dto> {
    const updated{{pascalCase name}} = await this.{{camelCase name}}Service.update(updated{{pascalCase name}}Dto)
    return {
      validation: {
        message: "",
        statusCode: HttpStatus.OK,
      },
      data: updated{{pascalCase name}},
    }
  }

  /**
   * delete {{pascalCase name}} from database
   *
   * @param {{camelCase name}}Dto - the {{pascalCase name}} to be deleted
   * @returns deleted{{pascalCase name}} - the deleted {{pascalCase name}}
   */
  @ApiResponse({
    status: HttpStatus.OK,
    description: "{{pascalCase name}} deleted successfully",
  })
  @Delete("delete")
  async delete(
    @Body() {{camelCase name}}Dto: {{pascalCase name}}Dto
  ): AsyncBaseResponse<{{pascalCase name}}Dto> {
    const deleted{{pascalCase name}} = await this.{{camelCase name}}Service.delete({{camelCase name}}Dto)
    return {
      validation: {
        message: "",
        statusCode: HttpStatus.OK,
      },
      data: deleted{{pascalCase name}},
    }
  }
}
